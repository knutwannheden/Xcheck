/*
* generated by Xtext
*/

package com.avaloq.tools.dslsdk.check.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CheckGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CheckCatalogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckCatalog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCheckCatalogAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPackageNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cPackageNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cFinalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cFinalFinalKeyword_4_0 = (Keyword)cFinalAssignment_4.eContents().get(0);
		private final Keyword cCatalogKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameValidIDParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cForKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cGrammarKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cGrammarAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cGrammarGrammarCrossReference_7_2_0 = (CrossReference)cGrammarAssignment_7_2.eContents().get(0);
		private final RuleCall cGrammarGrammarQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cGrammarGrammarCrossReference_7_2_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWithKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cIncludedCatalogsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cIncludedCatalogsCheckCatalogCrossReference_8_1_0 = (CrossReference)cIncludedCatalogsAssignment_8_1.eContents().get(0);
		private final RuleCall cIncludedCatalogsCheckCatalogQualifiedNameParserRuleCall_8_1_0_1 = (RuleCall)cIncludedCatalogsCheckCatalogCrossReference_8_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cCategoriesAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cCategoriesCategoryParserRuleCall_10_0_0 = (RuleCall)cCategoriesAssignment_10_0.eContents().get(0);
		private final Assignment cImplementationsAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cImplementationsImplementationParserRuleCall_10_1_0 = (RuleCall)cImplementationsAssignment_10_1.eContents().get(0);
		private final Assignment cChecksAssignment_10_2 = (Assignment)cAlternatives_10.eContents().get(2);
		private final RuleCall cChecksCheckParserRuleCall_10_2_0 = (RuleCall)cChecksAssignment_10_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//CheckCatalog:
		//	{CheckCatalog} "package" packageName=QualifiedName imports+=Import* final?="final"? "catalog" name=ValidID ("for"
		//	"grammar" ^grammar=[xtext::Grammar|QualifiedName])? ("with" includedCatalogs=[CheckCatalog|QualifiedName])? //TODO a list of included catalogs ??
		//
		//	// TODO only allow including a check catalog if the languages match. (matching rule are defined by the "with" clause of the grammar definition.) '{'
		//
		//	"{" (categories+=Category | implementations+=Implementation | checks+=Check)* "}";
		public ParserRule getRule() { return rule; }

		//{CheckCatalog} "package" packageName=QualifiedName imports+=Import* final?="final"? "catalog" name=ValidID ("for"
		//"grammar" ^grammar=[xtext::Grammar|QualifiedName])? ("with" includedCatalogs=[CheckCatalog|QualifiedName])? //TODO a list of included catalogs ??
		//
		//// TODO only allow including a check catalog if the languages match. (matching rule are defined by the "with" clause of the grammar definition.) '{'
		//
		//"{" (categories+=Category | implementations+=Implementation | checks+=Check)* "}"
		public Group getGroup() { return cGroup; }

		//{CheckCatalog}
		public Action getCheckCatalogAction_0() { return cCheckCatalogAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_2() { return cPackageNameAssignment_2; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_2_0() { return cPackageNameQualifiedNameParserRuleCall_2_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//final?="final"?
		public Assignment getFinalAssignment_4() { return cFinalAssignment_4; }

		//"final"
		public Keyword getFinalFinalKeyword_4_0() { return cFinalFinalKeyword_4_0; }

		//"catalog"
		public Keyword getCatalogKeyword_5() { return cCatalogKeyword_5; }

		//name=ValidID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_6_0() { return cNameValidIDParserRuleCall_6_0; }

		//("for" "grammar" ^grammar=[xtext::Grammar|QualifiedName])?
		public Group getGroup_7() { return cGroup_7; }

		//"for"
		public Keyword getForKeyword_7_0() { return cForKeyword_7_0; }

		//"grammar"
		public Keyword getGrammarKeyword_7_1() { return cGrammarKeyword_7_1; }

		//^grammar=[xtext::Grammar|QualifiedName]
		public Assignment getGrammarAssignment_7_2() { return cGrammarAssignment_7_2; }

		//[xtext::Grammar|QualifiedName]
		public CrossReference getGrammarGrammarCrossReference_7_2_0() { return cGrammarGrammarCrossReference_7_2_0; }

		//QualifiedName
		public RuleCall getGrammarGrammarQualifiedNameParserRuleCall_7_2_0_1() { return cGrammarGrammarQualifiedNameParserRuleCall_7_2_0_1; }

		//("with" includedCatalogs=[CheckCatalog|QualifiedName])?
		public Group getGroup_8() { return cGroup_8; }

		//"with"
		public Keyword getWithKeyword_8_0() { return cWithKeyword_8_0; }

		//includedCatalogs=[CheckCatalog|QualifiedName]
		public Assignment getIncludedCatalogsAssignment_8_1() { return cIncludedCatalogsAssignment_8_1; }

		//[CheckCatalog|QualifiedName]
		public CrossReference getIncludedCatalogsCheckCatalogCrossReference_8_1_0() { return cIncludedCatalogsCheckCatalogCrossReference_8_1_0; }

		//QualifiedName
		public RuleCall getIncludedCatalogsCheckCatalogQualifiedNameParserRuleCall_8_1_0_1() { return cIncludedCatalogsCheckCatalogQualifiedNameParserRuleCall_8_1_0_1; }

		//// TODO only allow including a check catalog if the languages match. (matching rule are defined by the "with" clause of the grammar definition.) '{'
		//
		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//(categories+=Category | implementations+=Implementation | checks+=Check)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//categories+=Category
		public Assignment getCategoriesAssignment_10_0() { return cCategoriesAssignment_10_0; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_10_0_0() { return cCategoriesCategoryParserRuleCall_10_0_0; }

		//implementations+=Implementation
		public Assignment getImplementationsAssignment_10_1() { return cImplementationsAssignment_10_1; }

		//Implementation
		public RuleCall getImplementationsImplementationParserRuleCall_10_1_0() { return cImplementationsImplementationParserRuleCall_10_1_0; }

		//checks+=Check
		public Assignment getChecksAssignment_10_2() { return cChecksAssignment_10_2; }

		//Check
		public RuleCall getChecksCheckParserRuleCall_10_2_0() { return cChecksCheckParserRuleCall_10_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class DocumentedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Documented");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckCatalogParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCategoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImplementationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Documented:
		//	CheckCatalog | Check | Category | Context | Implementation;
		public ParserRule getRule() { return rule; }

		//CheckCatalog | Check | Category | Context | Implementation
		public Alternatives getAlternatives() { return cAlternatives; }

		//CheckCatalog
		public RuleCall getCheckCatalogParserRuleCall_0() { return cCheckCatalogParserRuleCall_0; }

		//Check
		public RuleCall getCheckParserRuleCall_1() { return cCheckParserRuleCall_1; }

		//Category
		public RuleCall getCategoryParserRuleCall_2() { return cCategoryParserRuleCall_2; }

		//Context
		public RuleCall getContextParserRuleCall_3() { return cContextParserRuleCall_3; }

		//Implementation
		public RuleCall getImplementationParserRuleCall_4() { return cImplementationParserRuleCall_4; }
	}

	public class ImplicitlyNamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplicitlyNamed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCategoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ImplicitlyNamed:
		//	Check | Category;
		public ParserRule getRule() { return rule; }

		//Check | Category
		public Alternatives getAlternatives() { return cAlternatives; }

		//Check
		public RuleCall getCheckParserRuleCall_0() { return cCheckParserRuleCall_0; }

		//Category
		public RuleCall getCategoryParserRuleCall_1() { return cCategoryParserRuleCall_1; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdValidIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChecksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChecksCheckParserRuleCall_4_0 = (RuleCall)cChecksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Category:
		//	"category" id=ValidID? label=STRING "{" checks+=Check* "}";
		public ParserRule getRule() { return rule; }

		//"category" id=ValidID? label=STRING "{" checks+=Check* "}"
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//id=ValidID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ValidID
		public RuleCall getIdValidIDParserRuleCall_1_0() { return cIdValidIDParserRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//checks+=Check*
		public Assignment getChecksAssignment_4() { return cChecksAssignment_4; }

		//Check
		public RuleCall getChecksCheckParserRuleCall_4_0() { return cChecksCheckParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeverityRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSeverityRangeSeverityRangeParserRuleCall_0_0 = (RuleCall)cSeverityRangeAssignment_0.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindTriggerKindEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cDefaultSeverityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultSeveritySeverityKindEnumRuleCall_3_0 = (RuleCall)cDefaultSeverityAssignment_3.eContents().get(0);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdValidIDParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cFormalParametersAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cFormalParametersFormalParameterParserRuleCall_6_1_0_0 = (RuleCall)cFormalParametersAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cFormalParametersFormalParameterParserRuleCall_6_1_1_1_0 = (RuleCall)cFormalParametersAssignment_6_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMessageKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGivenMessageAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGivenMessageSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cGivenMessageAssignment_7_1.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cContextsAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_8_0_1_0 = (RuleCall)cContextsAssignment_8_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Assignment cContextsAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_8_1_0 = (RuleCall)cContextsAssignment_8_1.eContents().get(0);
		
		//Check:
		//	severityRange=SeverityRange? final?="final"? kind=TriggerKind? defaultSeverity=SeverityKind id=ValidID? label=STRING
		//	("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")? // if we have no parameter, we must still include ()
		//
		//	("message" givenMessage=STRING)? ("{" contexts+=Context* "}" | contexts+=Context?);
		public ParserRule getRule() { return rule; }

		//severityRange=SeverityRange? final?="final"? kind=TriggerKind? defaultSeverity=SeverityKind id=ValidID? label=STRING
		//("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")? // if we have no parameter, we must still include ()
		//
		//("message" givenMessage=STRING)? ("{" contexts+=Context* "}" | contexts+=Context?)
		public Group getGroup() { return cGroup; }

		//severityRange=SeverityRange?
		public Assignment getSeverityRangeAssignment_0() { return cSeverityRangeAssignment_0; }

		//SeverityRange
		public RuleCall getSeverityRangeSeverityRangeParserRuleCall_0_0() { return cSeverityRangeSeverityRangeParserRuleCall_0_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//kind=TriggerKind?
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//TriggerKind
		public RuleCall getKindTriggerKindEnumRuleCall_2_0() { return cKindTriggerKindEnumRuleCall_2_0; }

		//defaultSeverity=SeverityKind
		public Assignment getDefaultSeverityAssignment_3() { return cDefaultSeverityAssignment_3; }

		//SeverityKind
		public RuleCall getDefaultSeveritySeverityKindEnumRuleCall_3_0() { return cDefaultSeveritySeverityKindEnumRuleCall_3_0; }

		//id=ValidID?
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ValidID
		public RuleCall getIdValidIDParserRuleCall_4_0() { return cIdValidIDParserRuleCall_4_0; }

		//label=STRING
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }

		//("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//(formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//formalParameters+=FormalParameter
		public Assignment getFormalParametersAssignment_6_1_0() { return cFormalParametersAssignment_6_1_0; }

		//FormalParameter
		public RuleCall getFormalParametersFormalParameterParserRuleCall_6_1_0_0() { return cFormalParametersFormalParameterParserRuleCall_6_1_0_0; }

		//("," formalParameters+=FormalParameter)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_0() { return cCommaKeyword_6_1_1_0; }

		//formalParameters+=FormalParameter
		public Assignment getFormalParametersAssignment_6_1_1_1() { return cFormalParametersAssignment_6_1_1_1; }

		//FormalParameter
		public RuleCall getFormalParametersFormalParameterParserRuleCall_6_1_1_1_0() { return cFormalParametersFormalParameterParserRuleCall_6_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//("message" givenMessage=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"message"
		public Keyword getMessageKeyword_7_0() { return cMessageKeyword_7_0; }

		//givenMessage=STRING
		public Assignment getGivenMessageAssignment_7_1() { return cGivenMessageAssignment_7_1; }

		//STRING
		public RuleCall getGivenMessageSTRINGTerminalRuleCall_7_1_0() { return cGivenMessageSTRINGTerminalRuleCall_7_1_0; }

		//"{" contexts+=Context* "}" | contexts+=Context?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//"{" contexts+=Context* "}"
		public Group getGroup_8_0() { return cGroup_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }

		//contexts+=Context*
		public Assignment getContextsAssignment_8_0_1() { return cContextsAssignment_8_0_1; }

		//Context
		public RuleCall getContextsContextParserRuleCall_8_0_1_0() { return cContextsContextParserRuleCall_8_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }

		//contexts+=Context?
		public Assignment getContextsAssignment_8_1() { return cContextsAssignment_8_1; }

		//Context
		public RuleCall getContextsContextParserRuleCall_8_1_0() { return cContextsContextParserRuleCall_8_1_0; }
	}

	public class SeverityRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeverityRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSeverityRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinSeverityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinSeveritySeverityKindEnumRuleCall_3_0 = (RuleCall)cMinSeverityAssignment_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxSeverityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxSeveritySeverityKindEnumRuleCall_5_0 = (RuleCall)cMaxSeverityAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////TODO check duplicate names, qualified names don't include category
		//
		//SeverityRange:
		//	"@" "SeverityRange" "(" minSeverity=SeverityKind ".." maxSeverity=SeverityKind //TODO  verification not allowed for final
		//
		//	")";
		public ParserRule getRule() { return rule; }

		//"@" "SeverityRange" "(" minSeverity=SeverityKind ".." maxSeverity=SeverityKind //TODO  verification not allowed for final
		//
		//")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"SeverityRange"
		public Keyword getSeverityRangeKeyword_1() { return cSeverityRangeKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//minSeverity=SeverityKind
		public Assignment getMinSeverityAssignment_3() { return cMinSeverityAssignment_3; }

		//SeverityKind
		public RuleCall getMinSeveritySeverityKindEnumRuleCall_3_0() { return cMinSeveritySeverityKindEnumRuleCall_3_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }

		//maxSeverity=SeverityKind
		public Assignment getMaxSeverityAssignment_5() { return cMaxSeverityAssignment_5; }

		//SeverityKind
		public RuleCall getMaxSeveritySeverityKindEnumRuleCall_5_0() { return cMaxSeveritySeverityKindEnumRuleCall_5_0; }

		////TODO  verification not allowed for final
		//
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextContextParserRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		
		//Implementation:
		//	"def" / * define ? * / name=ID context=Context;
		public ParserRule getRule() { return rule; }

		//"def" / * define ? * / name=ID context=Context
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		/// * define ? * / name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//context=Context
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }

		//Context
		public RuleCall getContextContextParserRuleCall_2_0() { return cContextContextParserRuleCall_2_0; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterJvmFormalParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultValueXFormalParameterDefaultValueLiteralParserRuleCall_2_0 = (RuleCall)cDefaultValueAssignment_2.eContents().get(0);
		private final Assignment cLabelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLabelSTRINGTerminalRuleCall_3_0 = (RuleCall)cLabelAssignment_3.eContents().get(0);
		
		/// *
		//
		// *   Parameter Description (incl type and default values)
		//
		// * / // TODO how can formal parameters be referenced from within a 'def' Implementation clause?
		//
		//FormalParameter:
		//	parameter=JvmFormalParameter "=" defaultValue=XFormalParameterDefaultValueLiteral label=STRING?;
		public ParserRule getRule() { return rule; }

		//parameter=JvmFormalParameter "=" defaultValue=XFormalParameterDefaultValueLiteral label=STRING?
		public Group getGroup() { return cGroup; }

		//parameter=JvmFormalParameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//JvmFormalParameter
		public RuleCall getParameterJvmFormalParameterParserRuleCall_0_0() { return cParameterJvmFormalParameterParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//defaultValue=XFormalParameterDefaultValueLiteral
		public Assignment getDefaultValueAssignment_2() { return cDefaultValueAssignment_2; }

		//XFormalParameterDefaultValueLiteral
		public RuleCall getDefaultValueXFormalParameterDefaultValueLiteralParserRuleCall_2_0() { return cDefaultValueXFormalParameterDefaultValueLiteralParserRuleCall_2_0; }

		//label=STRING?
		public Assignment getLabelAssignment_3() { return cLabelAssignment_3; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_3_0() { return cLabelSTRINGTerminalRuleCall_3_0; }
	}

	public class XFormalParameterDefaultValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFormalParameterDefaultValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////TODO resolve the allowed types either in scopes or in validations
		//
		////TODO validate the default values according to the type.
		//
		//// todo add support for enumerations
		//
		//XFormalParameterDefaultValueLiteral returns xbase::XExpression:
		//	XBooleanLiteral | XIntLiteral | XStringLiteral;
		public ParserRule getRule() { return rule; }

		//XBooleanLiteral | XIntLiteral | XStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0() { return cXBooleanLiteralParserRuleCall_0; }

		//XIntLiteral
		public RuleCall getXIntLiteralParserRuleCall_1() { return cXIntLiteralParserRuleCall_1; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_2() { return cXStringLiteralParserRuleCall_2; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cContextTypeAssignment_1.eContents().get(0);
		private final Assignment cItAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItIDTerminalRuleCall_2_0 = (RuleCall)cItAssignment_2.eContents().get(0);
		private final Assignment cConstraintAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintXBlockExpressionParserRuleCall_3_0 = (RuleCall)cConstraintAssignment_3.eContents().get(0);
		
		/// *
		//
		// *   Context Description (incl constraint?)
		//
		// * / Context:
		//	"for" contextType=JvmTypeReference it=ID? constraint=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"for" contextType=JvmTypeReference it=ID? constraint=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//contextType=JvmTypeReference
		public Assignment getContextTypeAssignment_1() { return cContextTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getContextTypeJvmTypeReferenceParserRuleCall_1_0() { return cContextTypeJvmTypeReferenceParserRuleCall_1_0; }

		//it=ID?
		public Assignment getItAssignment_2() { return cItAssignment_2; }

		//ID
		public RuleCall getItIDTerminalRuleCall_2_0() { return cItIDTerminalRuleCall_2_0; }

		//constraint=XBlockExpression
		public Assignment getConstraintAssignment_3() { return cConstraintAssignment_3; }

		//XBlockExpression
		public RuleCall getConstraintXBlockExpressionParserRuleCall_3_0() { return cConstraintXBlockExpressionParserRuleCall_3_0; }
	}

	public class XGuardExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XGuardExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXGuardExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGuardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardXExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		
		///// * Adding Guards and Issues to the possible expressions * /
		//
		//XGuardExpression returns xbase::XExpression:
		//	{XGuardExpression} "guard" guard=XExpression;
		public ParserRule getRule() { return rule; }

		//{XGuardExpression} "guard" guard=XExpression
		public Group getGroup() { return cGroup; }

		//{XGuardExpression}
		public Action getXGuardExpressionAction_0() { return cXGuardExpressionAction_0; }

		//"guard"
		public Keyword getGuardKeyword_1() { return cGuardKeyword_1; }

		//guard=XExpression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_0() { return cGuardXExpressionParserRuleCall_2_0; }
	}

	public class XIssueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIssueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIssueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIssueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCheckAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCheckCheckCrossReference_2_0 = (CrossReference)cCheckAssignment_2.eContents().get(0);
		private final RuleCall cCheckCheckQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cCheckCheckCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cMarkerFeatureAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final CrossReference cMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0 = (CrossReference)cMarkerFeatureAssignment_3_1_0_1.eContents().get(0);
		private final RuleCall cMarkerFeatureEStructuralFeatureIDTerminalRuleCall_3_1_0_1_0_1 = (RuleCall)cMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0.eContents().get(1);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cMarkerObjectAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cMarkerObjectXExpressionParserRuleCall_3_1_1_0_0 = (RuleCall)cMarkerObjectAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cGroup_3_1_1.eContents().get(1);
		private final Keyword cNumberSignKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cMarkerFeatureAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final CrossReference cMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0 = (CrossReference)cMarkerFeatureAssignment_3_1_1_1_1.eContents().get(0);
		private final RuleCall cMarkerFeatureEStructuralFeatureIDTerminalRuleCall_3_1_1_1_1_0_1 = (RuleCall)cMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMarkerIndexAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMarkerIndexXExpressionParserRuleCall_3_2_1_0 = (RuleCall)cMarkerIndexAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMessageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMessageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMessageXExpressionParserRuleCall_4_1_0 = (RuleCall)cMessageAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBindKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cMessageParametersAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMessageParametersXExpressionParserRuleCall_5_2_0 = (RuleCall)cMessageParametersAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cMessageParametersAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cMessageParametersXExpressionParserRuleCall_5_3_1_0 = (RuleCall)cMessageParametersAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDataKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIssueCodeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIssueCodeValidIDParserRuleCall_6_1_0 = (RuleCall)cIssueCodeAssignment_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cIssueDataAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cIssueDataXExpressionParserRuleCall_6_3_0 = (RuleCall)cIssueDataAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cCommaKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cIssueDataAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cIssueDataXExpressionParserRuleCall_6_4_1_0 = (RuleCall)cIssueDataAssignment_6_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		
		//XIssueExpression returns xbase::XExpression:
		//	{XIssueExpression} "issue" check=[Check|QualifiedName]? ("on" ("#" markerFeature=[ecore::EStructuralFeature] // we list the possible choices to help antlr
		//
		//	| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature])?) ("[" markerIndex=XExpression "]")?)?
		//	("message" message=XExpression)? ("bind" "(" messageParameters+=XExpression ("," messageParameters+=XExpression)*
		//	")")? //TODO rename as bindings
		//
		//	("data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?;
		public ParserRule getRule() { return rule; }

		//{XIssueExpression} "issue" check=[Check|QualifiedName]? ("on" ("#" markerFeature=[ecore::EStructuralFeature] // we list the possible choices to help antlr
		//
		//| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature])?) ("[" markerIndex=XExpression "]")?)?
		//("message" message=XExpression)? ("bind" "(" messageParameters+=XExpression ("," messageParameters+=XExpression)* ")")? //TODO rename as bindings
		//
		//("data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?
		public Group getGroup() { return cGroup; }

		//{XIssueExpression}
		public Action getXIssueExpressionAction_0() { return cXIssueExpressionAction_0; }

		//"issue"
		public Keyword getIssueKeyword_1() { return cIssueKeyword_1; }

		//check=[Check|QualifiedName]?
		public Assignment getCheckAssignment_2() { return cCheckAssignment_2; }

		//[Check|QualifiedName]
		public CrossReference getCheckCheckCrossReference_2_0() { return cCheckCheckCrossReference_2_0; }

		//QualifiedName
		public RuleCall getCheckCheckQualifiedNameParserRuleCall_2_0_1() { return cCheckCheckQualifiedNameParserRuleCall_2_0_1; }

		//(=> "on" ("#" markerFeature=[ecore::EStructuralFeature] // we list the possible choices to help antlr
		//
		//| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature])?) ("[" markerIndex=XExpression "]")?)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "on"
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }

		//=> "#" markerFeature=[ecore::EStructuralFeature] // we list the possible choices to help antlr
		//
		//| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature])?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//=> "#" markerFeature=[ecore::EStructuralFeature]
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//=> "#"
		public Keyword getNumberSignKeyword_3_1_0_0() { return cNumberSignKeyword_3_1_0_0; }

		//markerFeature=[ecore::EStructuralFeature]
		public Assignment getMarkerFeatureAssignment_3_1_0_1() { return cMarkerFeatureAssignment_3_1_0_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0() { return cMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0; }

		//ID
		public RuleCall getMarkerFeatureEStructuralFeatureIDTerminalRuleCall_3_1_0_1_0_1() { return cMarkerFeatureEStructuralFeatureIDTerminalRuleCall_3_1_0_1_0_1; }

		//markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature])?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//markerObject=XExpression
		public Assignment getMarkerObjectAssignment_3_1_1_0() { return cMarkerObjectAssignment_3_1_1_0; }

		//XExpression
		public RuleCall getMarkerObjectXExpressionParserRuleCall_3_1_1_0_0() { return cMarkerObjectXExpressionParserRuleCall_3_1_1_0_0; }

		//(=> "#" markerFeature=[ecore::EStructuralFeature])?
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }

		//=> "#"
		public Keyword getNumberSignKeyword_3_1_1_1_0() { return cNumberSignKeyword_3_1_1_1_0; }

		//markerFeature=[ecore::EStructuralFeature]
		public Assignment getMarkerFeatureAssignment_3_1_1_1_1() { return cMarkerFeatureAssignment_3_1_1_1_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0() { return cMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0; }

		//ID
		public RuleCall getMarkerFeatureEStructuralFeatureIDTerminalRuleCall_3_1_1_1_1_0_1() { return cMarkerFeatureEStructuralFeatureIDTerminalRuleCall_3_1_1_1_1_0_1; }

		//(=> "[" markerIndex=XExpression "]")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_3_2_0() { return cLeftSquareBracketKeyword_3_2_0; }

		//markerIndex=XExpression
		public Assignment getMarkerIndexAssignment_3_2_1() { return cMarkerIndexAssignment_3_2_1; }

		//XExpression
		public RuleCall getMarkerIndexXExpressionParserRuleCall_3_2_1_0() { return cMarkerIndexXExpressionParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2_2() { return cRightSquareBracketKeyword_3_2_2; }

		//(=> "message" message=XExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "message"
		public Keyword getMessageKeyword_4_0() { return cMessageKeyword_4_0; }

		//message=XExpression
		public Assignment getMessageAssignment_4_1() { return cMessageAssignment_4_1; }

		//XExpression
		public RuleCall getMessageXExpressionParserRuleCall_4_1_0() { return cMessageXExpressionParserRuleCall_4_1_0; }

		//(=> "bind" "(" messageParameters+=XExpression ("," messageParameters+=XExpression)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//=> "bind"
		public Keyword getBindKeyword_5_0() { return cBindKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//messageParameters+=XExpression
		public Assignment getMessageParametersAssignment_5_2() { return cMessageParametersAssignment_5_2; }

		//XExpression
		public RuleCall getMessageParametersXExpressionParserRuleCall_5_2_0() { return cMessageParametersXExpressionParserRuleCall_5_2_0; }

		//(=> "," messageParameters+=XExpression)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//=> ","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//messageParameters+=XExpression
		public Assignment getMessageParametersAssignment_5_3_1() { return cMessageParametersAssignment_5_3_1; }

		//XExpression
		public RuleCall getMessageParametersXExpressionParserRuleCall_5_3_1_0() { return cMessageParametersXExpressionParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//(=> "data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//=> "data"
		public Keyword getDataKeyword_6_0() { return cDataKeyword_6_0; }

		//issueCode=ValidID?
		public Assignment getIssueCodeAssignment_6_1() { return cIssueCodeAssignment_6_1; }

		//ValidID
		public RuleCall getIssueCodeValidIDParserRuleCall_6_1_0() { return cIssueCodeValidIDParserRuleCall_6_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//issueData+=XExpression
		public Assignment getIssueDataAssignment_6_3() { return cIssueDataAssignment_6_3; }

		//XExpression
		public RuleCall getIssueDataXExpressionParserRuleCall_6_3_0() { return cIssueDataXExpressionParserRuleCall_6_3_0; }

		//(=> "," issueData+=XExpression)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//=> ","
		public Keyword getCommaKeyword_6_4_0() { return cCommaKeyword_6_4_0; }

		//issueData+=XExpression
		public Assignment getIssueDataAssignment_6_4_1() { return cIssueDataAssignment_6_4_1; }

		//XExpression
		public RuleCall getIssueDataXExpressionParserRuleCall_6_4_1_0() { return cIssueDataXExpressionParserRuleCall_6_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXForLoopExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXWhileExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXDoWhileExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXReturnExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXGuardExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXIssueExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
		//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//	XParenthesizedExpression | // <-new
		//
		//	XGuardExpression | // <-new
		//
		//	XIssueExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression |
		//XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
		//XParenthesizedExpression | // <-new
		//
		//XGuardExpression | // <-new
		//
		//XIssueExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_3() { return cXFeatureCallParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_6() { return cXForLoopExpressionParserRuleCall_6; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_7() { return cXWhileExpressionParserRuleCall_7; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_8() { return cXDoWhileExpressionParserRuleCall_8; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_9() { return cXThrowExpressionParserRuleCall_9; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_10() { return cXReturnExpressionParserRuleCall_10; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_11() { return cXTryCatchFinallyExpressionParserRuleCall_11; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_12() { return cXParenthesizedExpressionParserRuleCall_12; }

		//// <-new
		//
		//XGuardExpression
		public RuleCall getXGuardExpressionParserRuleCall_13() { return cXGuardExpressionParserRuleCall_13; }

		//// <-new
		//
		//XIssueExpression
		public RuleCall getXIssueExpressionParserRuleCall_14() { return cXIssueExpressionParserRuleCall_14; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard returns ecore::EString:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	public class SeverityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SeverityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cErrorErrorKeyword_0_0 = (Keyword)cErrorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWarningWarningKeyword_1_0 = (Keyword)cWarningEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInfoInfoKeyword_2_0 = (Keyword)cInfoEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIgnoreEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIgnoreIgnoreKeyword_3_0 = (Keyword)cIgnoreEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SeverityKind:
		//	error | warning | info | ignore;
		public EnumRule getRule() { return rule; }

		//error | warning | info | ignore
		public Alternatives getAlternatives() { return cAlternatives; }

		//error
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_0() { return cErrorEnumLiteralDeclaration_0; }

		//"error"
		public Keyword getErrorErrorKeyword_0_0() { return cErrorErrorKeyword_0_0; }

		//warning
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_1() { return cWarningEnumLiteralDeclaration_1; }

		//"warning"
		public Keyword getWarningWarningKeyword_1_0() { return cWarningWarningKeyword_1_0; }

		//info
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_2() { return cInfoEnumLiteralDeclaration_2; }

		//"info"
		public Keyword getInfoInfoKeyword_2_0() { return cInfoInfoKeyword_2_0; }

		//ignore
		public EnumLiteralDeclaration getIgnoreEnumLiteralDeclaration_3() { return cIgnoreEnumLiteralDeclaration_3; }

		//"ignore"
		public Keyword getIgnoreIgnoreKeyword_3_0() { return cIgnoreIgnoreKeyword_3_0; }
	}

	public class TriggerKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFastEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFastLiveKeyword_0_0 = (Keyword)cFastEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNormalOnSaveKeyword_1_0 = (Keyword)cNormalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExpensiveEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExpensiveOnDemandKeyword_2_0 = (Keyword)cExpensiveEnumLiteralDeclaration_2.eContents().get(0);
		
		//// we avoid using CheckKind to simplify writing expressions...
		//
		//enum TriggerKind:
		//	fast="live" | normal="onSave" | expensive="onDemand";
		public EnumRule getRule() { return rule; }

		//fast="live" | normal="onSave" | expensive="onDemand"
		public Alternatives getAlternatives() { return cAlternatives; }

		//fast="live"
		public EnumLiteralDeclaration getFastEnumLiteralDeclaration_0() { return cFastEnumLiteralDeclaration_0; }

		//"live"
		public Keyword getFastLiveKeyword_0_0() { return cFastLiveKeyword_0_0; }

		//normal="onSave"
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_1() { return cNormalEnumLiteralDeclaration_1; }

		//"onSave"
		public Keyword getNormalOnSaveKeyword_1_0() { return cNormalOnSaveKeyword_1_0; }

		//expensive="onDemand"
		public EnumLiteralDeclaration getExpensiveEnumLiteralDeclaration_2() { return cExpensiveEnumLiteralDeclaration_2; }

		//"onDemand"
		public Keyword getExpensiveOnDemandKeyword_2_0() { return cExpensiveOnDemandKeyword_2_0; }
	}
	
	private CheckCatalogElements pCheckCatalog;
	private ImportElements pImport;
	private DocumentedElements pDocumented;
	private ImplicitlyNamedElements pImplicitlyNamed;
	private CategoryElements pCategory;
	private CheckElements pCheck;
	private SeverityRangeElements pSeverityRange;
	private ImplementationElements pImplementation;
	private FormalParameterElements pFormalParameter;
	private XFormalParameterDefaultValueLiteralElements pXFormalParameterDefaultValueLiteral;
	private ContextElements pContext;
	private XGuardExpressionElements pXGuardExpression;
	private XIssueExpressionElements pXIssueExpression;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private SeverityKindElements unknownRuleSeverityKind;
	private TriggerKindElements unknownRuleTriggerKind;
	
	private final GrammarProvider grammarProvider;

	private XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public CheckGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammarProvider = grammarProvider;
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//CheckCatalog:
	//	{CheckCatalog} "package" packageName=QualifiedName imports+=Import* final?="final"? "catalog" name=ValidID ("for"
	//	"grammar" ^grammar=[xtext::Grammar|QualifiedName])? ("with" includedCatalogs=[CheckCatalog|QualifiedName])? //TODO a list of included catalogs ??
	//
	//	// TODO only allow including a check catalog if the languages match. (matching rule are defined by the "with" clause of the grammar definition.) '{'
	//
	//	"{" (categories+=Category | implementations+=Implementation | checks+=Check)* "}";
	public CheckCatalogElements getCheckCatalogAccess() {
		return (pCheckCatalog != null) ? pCheckCatalog : (pCheckCatalog = new CheckCatalogElements());
	}
	
	public ParserRule getCheckCatalogRule() {
		return getCheckCatalogAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Documented:
	//	CheckCatalog | Check | Category | Context | Implementation;
	public DocumentedElements getDocumentedAccess() {
		return (pDocumented != null) ? pDocumented : (pDocumented = new DocumentedElements());
	}
	
	public ParserRule getDocumentedRule() {
		return getDocumentedAccess().getRule();
	}

	//ImplicitlyNamed:
	//	Check | Category;
	public ImplicitlyNamedElements getImplicitlyNamedAccess() {
		return (pImplicitlyNamed != null) ? pImplicitlyNamed : (pImplicitlyNamed = new ImplicitlyNamedElements());
	}
	
	public ParserRule getImplicitlyNamedRule() {
		return getImplicitlyNamedAccess().getRule();
	}

	//Category:
	//	"category" id=ValidID? label=STRING "{" checks+=Check* "}";
	public CategoryElements getCategoryAccess() {
		return (pCategory != null) ? pCategory : (pCategory = new CategoryElements());
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Check:
	//	severityRange=SeverityRange? final?="final"? kind=TriggerKind? defaultSeverity=SeverityKind id=ValidID? label=STRING
	//	("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")? // if we have no parameter, we must still include ()
	//
	//	("message" givenMessage=STRING)? ("{" contexts+=Context* "}" | contexts+=Context?);
	public CheckElements getCheckAccess() {
		return (pCheck != null) ? pCheck : (pCheck = new CheckElements());
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	////TODO check duplicate names, qualified names don't include category
	//
	//SeverityRange:
	//	"@" "SeverityRange" "(" minSeverity=SeverityKind ".." maxSeverity=SeverityKind //TODO  verification not allowed for final
	//
	//	")";
	public SeverityRangeElements getSeverityRangeAccess() {
		return (pSeverityRange != null) ? pSeverityRange : (pSeverityRange = new SeverityRangeElements());
	}
	
	public ParserRule getSeverityRangeRule() {
		return getSeverityRangeAccess().getRule();
	}

	//Implementation:
	//	"def" / * define ? * / name=ID context=Context;
	public ImplementationElements getImplementationAccess() {
		return (pImplementation != null) ? pImplementation : (pImplementation = new ImplementationElements());
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}

	/// *
	//
	// *   Parameter Description (incl type and default values)
	//
	// * / // TODO how can formal parameters be referenced from within a 'def' Implementation clause?
	//
	//FormalParameter:
	//	parameter=JvmFormalParameter "=" defaultValue=XFormalParameterDefaultValueLiteral label=STRING?;
	public FormalParameterElements getFormalParameterAccess() {
		return (pFormalParameter != null) ? pFormalParameter : (pFormalParameter = new FormalParameterElements());
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	////TODO resolve the allowed types either in scopes or in validations
	//
	////TODO validate the default values according to the type.
	//
	//// todo add support for enumerations
	//
	//XFormalParameterDefaultValueLiteral returns xbase::XExpression:
	//	XBooleanLiteral | XIntLiteral | XStringLiteral;
	public XFormalParameterDefaultValueLiteralElements getXFormalParameterDefaultValueLiteralAccess() {
		return (pXFormalParameterDefaultValueLiteral != null) ? pXFormalParameterDefaultValueLiteral : (pXFormalParameterDefaultValueLiteral = new XFormalParameterDefaultValueLiteralElements());
	}
	
	public ParserRule getXFormalParameterDefaultValueLiteralRule() {
		return getXFormalParameterDefaultValueLiteralAccess().getRule();
	}

	/// *
	//
	// *   Context Description (incl constraint?)
	//
	// * / Context:
	//	"for" contextType=JvmTypeReference it=ID? constraint=XBlockExpression;
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	///// * Adding Guards and Issues to the possible expressions * /
	//
	//XGuardExpression returns xbase::XExpression:
	//	{XGuardExpression} "guard" guard=XExpression;
	public XGuardExpressionElements getXGuardExpressionAccess() {
		return (pXGuardExpression != null) ? pXGuardExpression : (pXGuardExpression = new XGuardExpressionElements());
	}
	
	public ParserRule getXGuardExpressionRule() {
		return getXGuardExpressionAccess().getRule();
	}

	//XIssueExpression returns xbase::XExpression:
	//	{XIssueExpression} "issue" check=[Check|QualifiedName]? ("on" ("#" markerFeature=[ecore::EStructuralFeature] // we list the possible choices to help antlr
	//
	//	| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature])?) ("[" markerIndex=XExpression "]")?)?
	//	("message" message=XExpression)? ("bind" "(" messageParameters+=XExpression ("," messageParameters+=XExpression)*
	//	")")? //TODO rename as bindings
	//
	//	("data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?;
	public XIssueExpressionElements getXIssueExpressionAccess() {
		return (pXIssueExpression != null) ? pXIssueExpression : (pXIssueExpression = new XIssueExpressionElements());
	}
	
	public ParserRule getXIssueExpressionRule() {
		return getXIssueExpressionAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression | // <-new
	//
	//	XGuardExpression | // <-new
	//
	//	XIssueExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//QualifiedNameWithWildCard returns ecore::EString:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//enum SeverityKind:
	//	error | warning | info | ignore;
	public SeverityKindElements getSeverityKindAccess() {
		return (unknownRuleSeverityKind != null) ? unknownRuleSeverityKind : (unknownRuleSeverityKind = new SeverityKindElements());
	}
	
	public EnumRule getSeverityKindRule() {
		return getSeverityKindAccess().getRule();
	}

	//// we avoid using CheckKind to simplify writing expressions...
	//
	//enum TriggerKind:
	//	fast="live" | normal="onSave" | expensive="onDemand";
	public TriggerKindElements getTriggerKindAccess() {
		return (unknownRuleTriggerKind != null) ? unknownRuleTriggerKind : (unknownRuleTriggerKind = new TriggerKindElements());
	}
	
	public EnumRule getTriggerKindRule() {
		return getTriggerKindAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XIntLiteral | XTypeLiteral |
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" => (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbaseWithAnnotations.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")" => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbaseWithAnnotations.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
