grammar com.avaloq.tools.dslsdk.check.Check with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/2008/Xtext" as xtext
generate check "http://www.avaloq.com/tools/dslsdk/check/Check"

CheckCatalog:
	{CheckCatalog}
	'package' packageName=QualifiedName
	(imports+=Import)*
	(final?='final')? 'catalog' name=ValidID
	('for' 'grammar' ^grammar=[xtext::Grammar|QualifiedName])?
	('with' includedCatalogs=[CheckCatalog|QualifiedName])?  //TODO a list of included catalogs ??
	// TODO only allow including a check catalog if the languages match. (matching rule are defined by the "with" clause of the grammar definition.) '{'
	'{'
	(categories+=Category | implementations+=Implementation | checks+=Check)*
	'}';

Import:
	'import' importedNamespace=QualifiedNameWithWildCard;


Documented:
	CheckCatalog | Check | Category | Context | Implementation
;

ImplicitlyNamed:
	Check | Category
;

Category:
	'category' (id=ValidID)? label=STRING '{'
	(checks+=Check)*
	'}';

Check:
	(severityRange=SeverityRange)?
	(final?='final')?
	(kind=TriggerKind)?
	defaultSeverity=SeverityKind
	(id=ValidID)? label=STRING
	('(' (formalParameters+=FormalParameter (',' formalParameters+=FormalParameter)*)? ')')? // if we have no parameter, we must still include ()
	('message' givenMessage=STRING)? (('{' (contexts+=Context)* '}') | contexts+=Context?);
//TODO check duplicate names, qualified names don't include category

SeverityRange:
	'@'	'SeverityRange' '(' minSeverity=SeverityKind '..' maxSeverity=SeverityKind ')' //TODO  verification not allowed for final
;

Implementation:
	'def' /* define ? */ name=ID context=Context;

/*
 *   Parameter Description (incl type and default values)
 */
// TODO how can formal parameters be referenced from within a 'def' Implementation clause?
FormalParameter:
	parameter=JvmFormalParameter '=' defaultValue=XFormalParameterDefaultValueLiteral
	 (label=STRING)?;
//TODO resolve the allowed types either in scopes or in validations
//TODO validate the default values according to the type.


XFormalParameterDefaultValueLiteral returns xbase::XExpression:
	XBooleanLiteral |
	XIntLiteral |
	XStringLiteral
	// todo add support for enumerations
;


/*
 *   Context Description (incl constraint?)
 */
Context:
	'for' contextType=JvmTypeReference (it=ID)? constraint=XBlockExpression;

///* Adding Guards and Issues to the possible expressions */
XGuardExpression returns xbase::XExpression:
	{XGuardExpression} 'guard' guard=XExpression;

XIssueExpression returns xbase::XExpression:
	{XIssueExpression}
	'issue'
	(check=[Check|QualifiedName])?
	(=> 'on'
		// we list the possible choices to help antlr
		( (=> '#' markerFeature=[ecore::EStructuralFeature|ID] )|
		 (markerObject=XExpression (=> '#' markerFeature=[ecore::EStructuralFeature|ID])?)
		)
		(=> '[' markerIndex=XExpression ']')?
 	)?
	(=> 'message' message=XExpression)?
	(=> 'bind' '('messageParameters+=XExpression (=> ',' messageParameters+=XExpression)* ')')?  //TODO rename as bindings
	(=> 'data' (issueCode=ValidID)? '(' issueData+=XExpression (=> ',' issueData+=XExpression)* ')' )?
	;

XPrimaryExpression returns xbase::XExpression:
	XConstructorCall
	| XBlockExpression
	| XSwitchExpression
	| XFeatureCall
	| XLiteral
	| XIfExpression
	| XForLoopExpression
	| XWhileExpression
	| XDoWhileExpression
	| XThrowExpression
	| XReturnExpression
	| XTryCatchFinallyExpression
	| XParenthesizedExpression
	| XGuardExpression // <-new
	| XIssueExpression // <-new
;


QualifiedNameWithWildCard returns ecore::EString:
	QualifiedName ('.' '*')?;

enum SeverityKind:
	error='error' | warning='warning' | info='info' | ignore='ignore';

enum TriggerKind:  // we avoid using CheckKind to simplify writing expressions...
	fast='live' | normal='onSave' | expensive='onDemand';
